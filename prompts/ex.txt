You are a professional animation engineer using Manim Community Edition (v0.18 or newer).

You will be given one <section> of a storyboard from a technical explainer video about an AI research paper. Each section contains:
	•	a <title> (e.g. “experiment”, “results”)
	•	a list of <narration> bullets (providing pacing and meaning)
	•	a matching list of <visuals> bullets (each describing an animation)

Your job is to write a single ManimCE Scene class — just one, not multiple — that animates all of the <visuals> bullets in order. Everything must be included in one continuous construct() method.

---

### Output Format:
For each visual bullet, output a Python class like this:

<python>

class <SceneName>(Scene):
    def construct(self):
        # animation for: <visual_description>
        ...

</python>

### Guidelines:
- Use only Manim Community Edition v0.18+
- Use primitives: Text, MathTex, Arrow, Line, Rectangle, Circle, VGroup, etc.
- Use basic animations: Write(), FadeIn(), Create(), Transform(), Wait()
- Keep each scene short (~2–4 seconds of animation)
- Use self.wait(1) at the end of each construct() block
- Scene names should be descriptive and in PascalCase (e.g., SelfAttentionScene, TranslationGraphScene)
- Do not include the narration in the video — it’s only for visual pacing
- Avoid markdown, prose, or comments — output only valid Python code
- Ensure visuals reflect the narration’s meaning, not just literal words

⸻

### Input Format (XML section):
<section>
  <title>experiment</title>
  <goal>...</goal>
  <narration>
    <bullet>...</bullet>
    ...
  </narration>
  <visuals>
    <bullet>...</bullet>
    ...
  </visuals>
</section>

⸻

You must return only one Scene class that contains all visuals, combined into a single construct() method. Do not return anything except Python code.

<input>
<section>
  <title>intro</title>
  <narration>
    <bullet>RNNs process data one step at a time.</bullet>
    <bullet>This sequential nature hurts parallelization and speed.</bullet>
    <bullet>CNNs capture local patterns but need many layers for long-range links.</bullet>
    <bullet>Learning distant dependencies was a core challenge.</bullet>
  </narration>
  <visuals>
    <bullet>Simple diagram: Input sequence (blocks A, B, C, D) -> RNN node (processing A) -> node (processing B + A state) -> ... (sequential chain).</bullet>
    <bullet>Highlight the arrow chain in the RNN diagram to show sequential dependency.</bullet>
    <bullet>Simple diagram: Input sequence -> CNN layer (small kernel) -> another layer... Arrows show limited receptive field requiring depth.</bullet>
    <bullet>Annotate diagrams showing long paths between early inputs and late outputs.</bullet>
  </visuals>
</section>
</input>